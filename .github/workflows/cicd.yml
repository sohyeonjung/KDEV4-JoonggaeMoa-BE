# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: JoonggaeMoa CI/CD

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  ci:
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/develop') ||
      (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'develop')
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      #JDK setting
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # create application-prod.yml
      - name: make application-prod.yml
        run: |
          mkdir -p src/main/resources
          cd src/main/resources
          touch ./application-prod.yml
          echo "${{secrets.PROPERTIES_PROD}}" > ./application-prod.yml
        shell: bash

      #gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
            restore-keys: |
            ${{ runner.os }}-gradle-

      #gradle build
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      - name: Build with Gradle Wrapper
        run: |
          export SPRING_PROFILES_ACTIVE=prod
          ./gradlew build -x test 

  cd:
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main')
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      # create application-prod.yml
      - name: make application-prod.yml
        run: |
          cd ./src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.PROPERTIES_PROD}}" > ./application-prod.yml
        shell: bash

      # gradle build
      - name: gradle build
        run: |
          export SPRING_PROFILES_ACTIVE=prod
          ./gradlew build -x test

      #docker build&push
      - name: Docker build & push to prod
        run: |
          docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}
          docker build -f Dockerfile -t ${{secrets.DOCKER_USERNAME}}/docker-joonggaemoa .
          docker push ${{secrets.DOCKER_USERNAME}}/docker-joonggaemoa

      #deploy to ec2
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |

            sudo docker ps
            sudo docker images

            # 기존 컨테이너 ID 조회
            OLD_CONTAINER_ID=$(sudo docker ps -q --filter ancestor=${{ secrets.DOCKER_USERNAME }}/docker-joonggaemoa)

            # Stop and remove existing container if it exists
            sudo docker stop $OLD_CONTAINER_ID 2>/dev/null || true
            #sudo docker rm $OLD_CONTAINER_ID 2>/dev/null || true
            
            # Pull and run new container
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-joonggaemoa
            sudo docker run -d --name joonggaemoa -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE=prod \
              ${{ secrets.DOCKER_USERNAME }}/docker-joonggaemoa
            
            # Wait for container to start and check logs
            sleep 10
            sudo docker logs joonggaemoa
            
            # Verify container is running
            if ! sudo docker ps | grep -q joonggaemoa; then
              echo "New Container failed to start"
              # 기존 컨테이너 재시작
              if [ -n "$OLD_CONTAINER_ID" ]; then
                echo "Restarting old container: $OLD_CONTAINER_ID"
                sudo docker start $OLD_CONTAINER_ID
                  
                # 기존 컨테이너 재시작 확인
                sleep 10
                if sudo docker ps | grep -q "$OLD_CONTAINER_ID"; then
                  echo "Rollback successful. Old container is running."
                else
                  echo "Rollback failed. Old container did not start properly."
                  exit 1
                fi
              else
                echo "No old container found. Rollback not possible."
                exit 1
              fi
            fi
            
            # Clean up old images
            sudo docker rm $OLD_CONTAINER_ID
            sudo docker image prune -f
